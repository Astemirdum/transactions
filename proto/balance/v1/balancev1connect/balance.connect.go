// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: balance/v1/balance.proto

package balancev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/Astemirdum/transactions/proto/balance/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BalanceServiceName is the fully-qualified name of the BalanceService service.
	BalanceServiceName = "balance.v1.BalanceService"
)

// BalanceServiceClient is a client for the balance.v1.BalanceService service.
type BalanceServiceClient interface {
	CreateBalance(context.Context, *connect_go.Request[v1.CreateBalanceRequest]) (*connect_go.Response[v1.CreateBalanceResponse], error)
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
	CashOut(context.Context, *connect_go.Request[v1.CashOutRequest]) (*connect_go.Response[v1.CashOutResponse], error)
}

// NewBalanceServiceClient constructs a client for the balance.v1.BalanceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBalanceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BalanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &balanceServiceClient{
		createBalance: connect_go.NewClient[v1.CreateBalanceRequest, v1.CreateBalanceResponse](
			httpClient,
			baseURL+"/balance.v1.BalanceService/CreateBalance",
			opts...,
		),
		getBalance: connect_go.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+"/balance.v1.BalanceService/GetBalance",
			opts...,
		),
		cashOut: connect_go.NewClient[v1.CashOutRequest, v1.CashOutResponse](
			httpClient,
			baseURL+"/balance.v1.BalanceService/CashOut",
			opts...,
		),
	}
}

// balanceServiceClient implements BalanceServiceClient.
type balanceServiceClient struct {
	createBalance *connect_go.Client[v1.CreateBalanceRequest, v1.CreateBalanceResponse]
	getBalance    *connect_go.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
	cashOut       *connect_go.Client[v1.CashOutRequest, v1.CashOutResponse]
}

// CreateBalance calls balance.v1.BalanceService.CreateBalance.
func (c *balanceServiceClient) CreateBalance(ctx context.Context, req *connect_go.Request[v1.CreateBalanceRequest]) (*connect_go.Response[v1.CreateBalanceResponse], error) {
	return c.createBalance.CallUnary(ctx, req)
}

// GetBalance calls balance.v1.BalanceService.GetBalance.
func (c *balanceServiceClient) GetBalance(ctx context.Context, req *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// CashOut calls balance.v1.BalanceService.CashOut.
func (c *balanceServiceClient) CashOut(ctx context.Context, req *connect_go.Request[v1.CashOutRequest]) (*connect_go.Response[v1.CashOutResponse], error) {
	return c.cashOut.CallUnary(ctx, req)
}

// BalanceServiceHandler is an implementation of the balance.v1.BalanceService service.
type BalanceServiceHandler interface {
	CreateBalance(context.Context, *connect_go.Request[v1.CreateBalanceRequest]) (*connect_go.Response[v1.CreateBalanceResponse], error)
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
	CashOut(context.Context, *connect_go.Request[v1.CashOutRequest]) (*connect_go.Response[v1.CashOutResponse], error)
}

// NewBalanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBalanceServiceHandler(svc BalanceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/balance.v1.BalanceService/CreateBalance", connect_go.NewUnaryHandler(
		"/balance.v1.BalanceService/CreateBalance",
		svc.CreateBalance,
		opts...,
	))
	mux.Handle("/balance.v1.BalanceService/GetBalance", connect_go.NewUnaryHandler(
		"/balance.v1.BalanceService/GetBalance",
		svc.GetBalance,
		opts...,
	))
	mux.Handle("/balance.v1.BalanceService/CashOut", connect_go.NewUnaryHandler(
		"/balance.v1.BalanceService/CashOut",
		svc.CashOut,
		opts...,
	))
	return "/balance.v1.BalanceService/", mux
}

// UnimplementedBalanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBalanceServiceHandler struct{}

func (UnimplementedBalanceServiceHandler) CreateBalance(context.Context, *connect_go.Request[v1.CreateBalanceRequest]) (*connect_go.Response[v1.CreateBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("balance.v1.BalanceService.CreateBalance is not implemented"))
}

func (UnimplementedBalanceServiceHandler) GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("balance.v1.BalanceService.GetBalance is not implemented"))
}

func (UnimplementedBalanceServiceHandler) CashOut(context.Context, *connect_go.Request[v1.CashOutRequest]) (*connect_go.Response[v1.CashOutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("balance.v1.BalanceService.CashOut is not implemented"))
}
